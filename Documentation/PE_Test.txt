=============================================================================
List of generated methods in project: PE_Test

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "GPIO1"     (component GPIO_LDD)
   - GPIO1_Init -This method initializes the associated peripheral(s) and the component internal variables. The method is 
                called automatically as a part of the application initialization code.
   - GPIO1_SetPortValue -This method writes the output data value to the port. Only configured pins (through all of bit fields 
                in this component) are affected.
   - GPIO1_GetPortValue -This method returns the current port input data value. Only configured pins (through all of bit fields 
                in this component) are returned.
   - GPIO1_ClearPortBits -This method drives the specified bits of the port to the inactive level. Only configured pins 
                (through all of bit fields in this component) are affected.
   - GPIO1_SetPortBits -This method drives the specified bits of the port to the active level. Only configured pins (through 
                all of bit fields in this component) are affected.
   - GPIO1_TogglePortBits -This method inverts the specified bits of the port to another level. Only configured pins (through 
                all of bit fields in this component) are affected.
   - GPIO1_SetPortInputDirection -This method sets the specified pins of the port to the input direction. Only configured pins 
                (through all of bit fields in this component) are affected.
   - GPIO1_SetPortOutputDirection -This method sets the specified pins of the port to the output direction. The specified pins 
                of the port will be driven to specified states. Only configured pins (through all of bit fields in this 
                component) are affected.
   - GPIO1_SetFieldValue -This method sets the output data value of the specified bit field.
   - GPIO1_GetFieldValue -This method returns the current input data of the specified field.
   - GPIO1_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - GPIO1_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - GPIO1_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.

Module "GPIO2"     (component GPIO_LDD)
   - GPIO2_Init -This method initializes the associated peripheral(s) and the component internal variables. The method is 
                called automatically as a part of the application initialization code.
   - GPIO2_SetFieldValue -This method sets the output data value of the specified bit field.
   - GPIO2_GetFieldValue -This method returns the current input data of the specified field.
   - GPIO2_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - GPIO2_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - GPIO2_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.

Module "AS1"       (component AsynchroSerial)
   - AS1_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the preferred 
                method to handle error and break exception in the interrupt mode is to use events <OnError> and <OnBreak> the 
                return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the information about an 
                exception in interrupt mode is returned only if there is a valid character ready to be read.
   - AS1_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - AS1_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental error), 
                otherwise it returns an error code (it does not wait for data).  This method is available only if non-zero 
                length of the input buffer is defined and the receiver property is enabled.  If less than requested number of 
                characters is received only the available data is copied from the receive buffer to the user specified 
                destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter is set to 
                the number of received characters.
   - AS1_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of the output 
                buffer is defined and the transmitter property is enabled.
   - AS1_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled.
   - AS1_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer is 
                defined and the receiver property is enabled.
   - AS1_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the receiver 
                property is enabled.
   - AS1_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "Bit1"      (component BitIO_LDD)
   - Bit1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - Bit1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is read and returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].

Module "Bit2"      (component BitIO_LDD)
   - Bit2_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - Bit2_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is read and returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].

Module "LCDC1"     (component LCDC_LDD)
   - LCDC1_Init -Initializes the device and allocates memory for the private device data structure.
   - LCDC1_SetupBitmap -This method configures bitmap (virtual page) for selected layer.
   - LCDC1_SetupWindow -This method configures window in bitmap, that will be displayed.
   - LCDC1_SetupWindowPosOnScreen -This method configures window position on the screen.
   - LCDC1_Main -This method is available only in polling mode. If interrupt service is disabled this method replaces the RNG 
                interrupt handler.

Module "SM1"       (component SPIMaster_LDD)
   - SM1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - SM1_SendBlock -This method sends a block of characters. The method returns ERR_BUSY when the previous block transmission 
                is not completed. The method <CancelBlockTransmission> can be used to cancel a transmit operation.

Module "DMA1"      (component DMA_LDD)
   - DMA1_Init -Initializes the device according to design-time configuration properties. Allocates memory for the device data 
                structure.   If the <Enable in init. code> is set to "yes" then the device is also enabled (see the description 
                of the Enable method).  This method can be called only once. Before the second call of Init the Deinit method 
                must be called first.
   - DMA1_Deinit -Deinitializes the associated peripheral(s) and frees the component internal data structure.
   - DMA1_AllocateChannel -The method allocates DMA channel for the DMA transfer defined by the transfer descriptor input 
                parameter DescriptorPtr. This method must be called before DMA channel is initialized. Otherwise ERR_NOTAVAIL 
                error code is returned after call of DMA_LDD channel methods.
   - DMA1_EnableChannel -The method initializes and/or enables the DMA channel allocated for the DMA transfer defined by the 
                transfer descriptor input parameter DescriptorPtr. First call of this method on given DMA channel initializes 
                it and enables HW requests if Peripheral device or Always enabled trigger source is selected in transfer 
                descriptor Trigger source type item. This method can be also used together with Disable method to temporary 
                switch On/Off the DMA channel HW requests. In such case DMA channel registers are not reinitialized again. New 
                initialization of DMA channel can be done via SetChannelDescriptorUpdate method which reinitializes whole 
                channel with new transfer descriptor. After calling of EnableChannel method channel status is set to 
                LDD_DMA_IDLE.

Module "Cpu"       (component MK70FN1M0MJ15)
   - Cpu_EnableInt -Enables all maskable interrupts.
   - Cpu_DisableInt -Disables all maskable interrupts.

===================================================================================
